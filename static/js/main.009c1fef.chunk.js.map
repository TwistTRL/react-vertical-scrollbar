{"version":3,"sources":["lib/DragOverlay.js","lib/VerticalScrollbar.js","lib/index.js","index.js"],"names":["DragOverlay","handleMouseMove","ev","preventDefault","stopPropagation","mouseMoveHandler","_this","props","handleMouseUp","mouseUpHandler","cursor","this","react_default","a","createElement","className","style","document","addEventListener","removeEventListener","PureComponent","MODE_HOVERING","MODE_GROVE_DRAGGING","MODE_THUMB_DRAGGING","VerticalScrollbar","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","startGroveDragging","_this$props","height","realHeight","realRange","scrollStart","clientY","ref","current","getBoundingClientRect","top","setState","mode","updateScrollStart","startThumbDragging","snapshot","endDragging","handleGroveDraggingMouseMove","_this$props2","handleThumbDraggingMouseMove","_this$props3","React","createRef","state","_this$props4","width","color","thumbTop","thumbHeight","Math","max","react","onMouseDown","backgroundColor","src_lib_DragOverlay","TypeError","updateScrollStartHandler","capScrollStart","_this$props5","min","App","_this2","_this$state","Fragment","type","value","onChange","Number","parseInt","target","step","lib","assign","Component","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.009c1fef.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\"\nimport PropTypes from 'prop-types'\n// CSS\nimport \"./DragOverlay.css\"\n\nclass DragOverlay extends PureComponent {\n  render() {\n    let { cursor} = this.props\n    return <div className=\"fullscreen\" style={{cursor:cursor}}></div>\n  }\n\n  componentDidMount(){\n    document.addEventListener(\"mousemove\",this.handleMouseMove,true)\n    document.addEventListener(\"mouseup\",this.handleMouseUp,true)\n    //document.addEventListener(\"DOMMouseScroll\",this.ignoreScroll)\n  }\n\n  componentWillUnmount(){\n    document.removeEventListener(\"mousemove\",this.handleMouseMove,true)\n    document.removeEventListener(\"mouseup\",this.handleMouseUp,true)\n    //document.removeEventListener(\"DOMMouseScroll\",this.ignoreScroll)\n  }\n  \n  handleMouseMove = (ev)=>{\n    ev.preventDefault();\n    ev.stopPropagation()\n    let {mouseMoveHandler} = this.props\n    mouseMoveHandler(ev)\n  }\n\n  handleMouseUp = (ev)=>{\n    ev.preventDefault();\n    ev.stopPropagation()\n    let {mouseUpHandler} = this.props\n    mouseUpHandler(ev)\n  }\n  \n  ignoreScroll(ev){\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n}\n\n\nDragOverlay.propTypes = {\n  cursor: PropTypes.string.isRequired,\n  mouseMoveHandler: PropTypes.func.isRequired,\n  mouseUpHandler: PropTypes.func.isRequired\n}\n\nexport default DragOverlay\n","import React, {PureComponent,Fragment} from \"react\";\nimport PropTypes from 'prop-types';\nimport DragOverlay from \"./DragOverlay\";\nimport \"./VerticalScrollbar.css\";\n\nconst MODE_HOVERING = \"hovering\";\nconst MODE_GROVE_DRAGGING = \"grove_dragging\";\nconst MODE_THUMB_DRAGGING = \"thumb_dragging\";\n\nclass VerticalScrollbar extends PureComponent {\n  constructor(props){\n    super(props);\n    this.ref = React.createRef();\n    this.state = {mode:MODE_HOVERING\n                  };\n    this.snapshot = {};\n  }\n  \n  render(){\n    let { width,height,color,\n          realHeight,realRange,\n          scrollStart\n          } = this.props;\n    let {mode} = this.state;\n    let thumbTop = scrollStart/realHeight*height;\n    let thumbHeight = Math.max(10,realRange/realHeight*height);\n    \n    if (mode===MODE_HOVERING){\n      return (\n        <Fragment>\n          <div  className=\"VerticalScrollbar-container\" \n                style={{height:height,width:width}}\n                onMouseDown={this.startGroveDragging}\n                ref={this.ref}\n                >\n            <div  className=\"VerticalScrollbar-grove\">\n            </div>\n            <div  className=\"VerticalScrollbar-thumb\"\n                  style={{height:thumbHeight,top:thumbTop,backgroundColor:color}}\n                  onMouseDown={this.startThumbDragging}\n                  >\n            </div>\n          </div>\n        </Fragment>\n      );\n    }\n    else if (mode===MODE_GROVE_DRAGGING) {\n      return (\n        <Fragment>\n          <div  className=\"VerticalScrollbar-container\" \n                style={{height:height,width:width}}\n                ref={this.ref}\n                >\n            <div className=\"VerticalScrollbar-grove\">\n            </div>\n            <div  className=\"VerticalScrollbar-thumb\"\n                  style={{height:thumbHeight,top:thumbTop,backgroundColor:color}}\n                  onMouseDown={this.startThumbDragging}\n                  >\n            </div>\n          </div>\n          <DragOverlay  mouseMoveHandler={this.handleGroveDraggingMouseMove}\n                        mouseUpHandler={this.endDragging}\n                        style={{height:thumbHeight,top:thumbTop}}\n                        cursor=\"ns-resize\"/>\n        </Fragment>\n      );\n    }\n    else if (mode===MODE_THUMB_DRAGGING) {\n      return (\n        <Fragment>\n          <div  className=\"VerticalScrollbar-container\" \n                style={{height:height,width:width}}\n                ref={this.ref}\n                >\n            <div className=\"VerticalScrollbar-grove\">\n            </div>\n            <div  className=\"VerticalScrollbar-thumb\"\n                  style={{height:thumbHeight,top:thumbTop,backgroundColor:color}}\n                  onMouseDown={this.startThumbDragging}\n                  >\n            </div>\n          </div>\n          <DragOverlay mouseMoveHandler={this.handleThumbDraggingMouseMove}\n                       mouseUpHandler={this.endDragging}\n                       cursor=\"ns-resize\"/>\n        </Fragment>\n      );\n    }\n    else {\n      throw new TypeError(\"Unknown mode\",mode);\n    }\n  }\n  \n  startGroveDragging = (ev)=> {\n    ev.preventDefault();\n    ev.stopPropagation();\n    let {height, realHeight, realRange} = this.props;\n    let domY = ev.clientY - this.ref.current.getBoundingClientRect().top;\n    \n    let scrollStart = domY*realHeight/height-realRange/2;\n    this.setState({mode:MODE_GROVE_DRAGGING});\n    this.updateScrollStart(scrollStart);\n  }\n  \n  startThumbDragging = (ev)=> {\n    ev.preventDefault();\n    ev.stopPropagation();\n    this.snapshot.scrollStart = this.props.scrollStart;\n    this.snapshot.clientY = ev.clientY;\n    this.setState({mode:MODE_THUMB_DRAGGING});\n  }\n  \n  endDragging = (ev)=> {\n    this.setState({mode:MODE_HOVERING});\n  }\n  \n  handleGroveDraggingMouseMove = (ev)=> {\n    let {height, realHeight, realRange} = this.props;\n    let domY = ev.clientY - this.ref.current.getBoundingClientRect().top;\n    let scrollStart = domY*realHeight/height-realRange/2;\n    this.updateScrollStart(scrollStart);\n  }\n  \n  handleThumbDraggingMouseMove = (ev)=> {\n    let {height, realHeight} = this.props;\n    let scrollStart = this.snapshot.scrollStart + realHeight/height*(ev.clientY-this.snapshot.clientY);\n    this.updateScrollStart(scrollStart);\n  }\n  \n  updateScrollStart(scrollStart) {\n    let {updateScrollStartHandler} = this.props;\n    scrollStart = this.capScrollStart(scrollStart);\n    if (updateScrollStartHandler && this.props.scrollStart !== scrollStart) {\n      updateScrollStartHandler(scrollStart);\n    }\n  }\n  \n  capScrollStart(scrollStart) {\n    let {realHeight,realRange} = this.props;\n    return Math.max(0,Math.min(realHeight-realRange,scrollStart));\n  }\n}\n\nVerticalScrollbar.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  realHeight: PropTypes.number.isRequired,\n  realRange: PropTypes.number.isRequired,\n  scrollStart: PropTypes.number.isRequired,\n  updateScrollStartHandler: PropTypes.func.isRequired,\n}\n\nexport default VerticalScrollbar;\n","import VerticalScrollbar from \"./VerticalScrollbar\";\nexport default VerticalScrollbar;\n","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\n\nimport VerticalScrollbar from \"./lib\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {width:10,height:400,color:\"green\",\n                  realHeight:100,realRange:40,scrollStart:0};\n  }\n  \n  render(){\n    let {width,height,color,realHeight,realRange,scrollStart} = this.state;\n    return (\n      <>\n        <div>\n          width:\n          <input  type=\"text\"\n                  value={width}\n                  onChange={(ev)=>{\n                              this.setState({width:Number.parseInt(ev.target.value) || 0});\n                            }}\n                  />\n        </div>\n        <div>\n          height:\n          <input  type=\"text\"\n                  value={height}\n                  onChange={(ev)=>{\n                              this.setState({height:Number.parseInt(ev.target.value) || 0});\n                            }}\n                  />\n        </div>\n        <div>\n          color:\n          <input  type=\"text\"\n                  value={color}\n                  onChange={(ev)=>{\n                              this.setState({color:ev.target.value});\n                            }}\n                  />\n        </div>\n        <div>\n          realHeight:\n          <input  type=\"range\" min=\"100\" max=\"2000\" step=\"1\"\n                  value={realHeight}\n                  onChange={(ev)=>{\n                              this.setState({realHeight:Number.parseInt(ev.target.value)});\n                            }}\n                  />\n        </div>\n        <div>\n          realRange:\n          <input  type=\"range\" min=\"10\" max=\"1000\" step=\"1\"\n                  value={realRange}\n                  onChange={(ev)=>{\n                              this.setState({realRange:Number.parseInt(ev.target.value)});\n                            }}\n                  />\n        </div>\n        <div>\n          scrollStart:\n          <input  type=\"range\" min=\"0\" max=\"2000\" step=\"1\"\n                  value={scrollStart}\n                  onChange={(ev)=>{\n                              this.setState({scrollStart:Number.parseInt(ev.target.value)});\n                            }}\n                  />\n        </div>\n        <VerticalScrollbar  {...this.state}\n                            updateScrollStartHandler={(scrollStart)=>this.setState({scrollStart})}\n                            />\n      </>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}